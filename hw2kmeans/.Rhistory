if(bingo()<=50){return(100)}
else if(bingo()<=55){return(75)}
else if(bingo()<=60){return(50)}
else if(bingo()<=65){return(25)}
else if(bingo()<=70){return(10)}
else{return(-10)}
}
bingo_game()
### Assignment 2 (Part 1) Bingo Outline
### ANLY 4100, Fall 2020
### Professor: Courtney Paulson
## The following is a partially completed outline for the
##    game of bingo (rules given in Assignment 2).
## Complete the tasks to run a complete game of bingo.
## Please note that you are NOT required to follow this outline!
## It may help you structure your thinking, but it is only
##    intended as a guide if you want one.
## First, set the seed to 24646
set.seed(24646)
## Next, create a bingo card by randomly selecting 24 numbers
##    from 1 to 75. Be sure to sample without replacement!
card <- sample(1:75,24, replace = FALSE)
bingo <- function(){
j<-0
i <- 1
turns<- 0
z <- sample(1:75,75,replace = FALSE)
while(j!=24){
t <- z[i] %in% card
if(t == "TRUE") {j=j+1}
turns=turns+1
i=i+1
}
return(turns)
}
bingo()
## Next, create a function named bingo_game which
##    takes in a bingo card, plays a game of bingo, and
##    returns the value of the game.
## The game should follow the rules given in the Assignment file
bingo_game <- function(bingo_card = NULL){
if(bingo()<=50){return(100)}
else if(bingo()<=55){return(75)}
else if(bingo()<=60){return(50)}
else if(bingo()<=65){return(25)}
else if(bingo()<=70){return(10)}
else{return(-10)}
}
## Write a loop to play 100 games of bingo with your function
##    and record the return of each game
total_return<- 0
for(i in 1:100){
return <- bingo_game()
total_return <- return + total_return
}
## What is the expected value of playing 100 games of bingo?
total_return
total_return<- 0
for(i in 1:100){
return[i] <- bingo_game()
total_return <- return + total_return
}
total_return<- 0
for(i in 1:100){
return[i] <- bingo_game()
#total_return <- return + total_return
}
return
for(i in 1:100){
return <- bingo_game()
total_return <- return + total_return
}
## What is the expected value of playing 100 games of bingo?
total_return
### Assignment 2 (Part 1) Bingo Outline
### ANLY 4100, Fall 2020
### Professor: Courtney Paulson
## The following is a partially completed outline for the
##    game of bingo (rules given in Assignment 2).
## Complete the tasks to run a complete game of bingo.
## Please note that you are NOT required to follow this outline!
## It may help you structure your thinking, but it is only
##    intended as a guide if you want one.
## First, set the seed to 24646
set.seed(24646)
## Next, create a bingo card by randomly selecting 24 numbers
##    from 1 to 75. Be sure to sample without replacement!
card <- sample(1:75,24, replace = FALSE)
bingo <- function(){
j<-0
i <- 1
turns<- 0
z <- sample(1:75,75,replace = FALSE)
while(j!=24){
t <- z[i] %in% card
if(t == "TRUE") {j=j+1}
turns=turns+1
i=i+1
}
return(turns)
}
bingo()
## Next, create a function named bingo_game which
##    takes in a bingo card, plays a game of bingo, and
##    returns the value of the game.
## The game should follow the rules given in the Assignment file
bingo_game <- function(bingo_card = NULL){
if(bingo()<=50){return(100)}
else if(bingo()<=55){return(75)}
else if(bingo()<=60){return(50)}
else if(bingo()<=65){return(25)}
else if(bingo()<=70){return(10)}
else{return(-10)}
}
## Write a loop to play 100 games of bingo with your function
##    and record the return of each game
total_return<- 0
for(i in 1:100){
return <- bingo_game()
total_return <- return + total_return
}
## What is the expected value of playing 100 games of bingo?
total_return
var3 <- 30
newfunc2 <- function(var1 = 20, var2 = 100, var3 = NULL){
newvar <- sum(c(var1,var2,Var3))
ifelse(var3 < newvar, return(var3), return(newvar))
}
newfunc2()
newfunc2(30)
newfunc2(10,20,30)
newfunc2(var3= 30)
newfunc2(var3= 30)
newfunc2(var1 = 10, var2 = 20, var3= 30)
newfunc2 <- function(var1 = 20, var2 = 30, var3 = 40){
newvar <- sum(c(var1,var2,Var3))
ifelse(var3 < newvar, return(var3), return(newvar))
}
newfunc2()
newfunc2 <- function(var1 = 20, var2 = 30, var3 = 40){
newvar <- sum(c(var1,var2,Var3))
ifelse(var3 < newvar, return(var3), return(newvar))
}
newfunc2()
newfunc2(40)
var1 <- 20
var2<- 30
var3 <- 40
newvar <- sum(c(10,20,var3))
ifelse(var3 < newvar, return(var3), return(newvar))
newvar <- sum(c(var1,var2,var3))
## function to return the average of arguments
avg_func <- function(a,b){
avg <- (a+b)/2
ifelse(avg < 0,0, avg )
}
avg_func(a,b)
avg_func(2,3)
avg_func(2,-3)
rm(list = ls())
rm(list = ls())
install.packages(Rcurl)
library(Rcurl)
install.packages(RCurl)
install.packages('RCurl')
library(RCurl)
library(cars)
data("mtcars")
force(mtcars)
library(ggplot2)
ggplot(data = mtcars, aes(x = as.factor(cyl), y = mpg)) +geom_boxplot()
ggplot(data = mtcars, aes(x = as.factor(cyl), y = mpg)) +geom_boxplot()+
labs(x = c("Four", '"Six', "Eight"))
ggplot(data = mtcars, aes(x = as.factor(cyl), y = mpg)) +geom_boxplot()+
scale_x_discrete(labels = c('Four','Six','Eight'))
list <- c("2015", "2016", "2017")
print(i)
for( i in 1:3){
print(i)
}
for( i in 1:3){
var_paste(i) <- 1
}
for( i in 1:3){
assign(paste("a", i, sep = ""), i)
}
assign(paste("a", i, sep = "_"), i)
for( i in 1:3){
assign(paste("a", i, sep = "_"), i)
}
for( i in 1:3){
assign(paste(list[i], i, sep = "_"), i)
}
library(baseballr)
library(tidyverse)
library(DBI)
annual_statcast_query <- function(season) {
dates <- seq.Date(as.Date(paste0(season, '-03-01')),
as.Date(paste0(season, '-12-01')), by = 'week')
date_grid <- tibble(start_date = dates,
end_date = dates + 6)
safe_savant <- safely(scrape_statcast_savant)
payload <- map(.x = seq_along(date_grid$start_date),
~{message(paste0('\nScraping week of ', date_grid$start_date[.x], '...\n'))
payload <- safe_savant(start_date = date_grid$start_date[.x],
end_date = date_grid$end_date[.x], type = 'pitcher')
return(payload)
})
payload_df <- map(payload, 'result')
number_rows <- map_df(.x = seq_along(payload_df),
~{number_rows <- tibble(week = .x,
number_rows = length(payload_df[[.x]]$game_date))}) %>%
filter(number_rows > 0) %>%
pull(week)
payload_df_reduced <- payload_df[number_rows]
combined <- payload_df_reduced %>%
bind_rows()
return(combined)
}
format_append_statcast <- function(df) {
# function for appending new variables to the data set
additional_info <- function(df) {
# apply additional coding for custom variables
df$hit_type <- with(df, ifelse(type == "X" & events == "single", 1,
ifelse(type == "X" & events == "double", 2,
ifelse(type == "X" & events == "triple", 3,
ifelse(type == "X" & events == "home_run", 4, NA)))))
df$hit <- with(df, ifelse(type == "X" & events == "single", 1,
ifelse(type == "X" & events == "double", 1,
ifelse(type == "X" & events == "triple", 1,
ifelse(type == "X" & events == "home_run", 1, NA)))))
df$fielding_team <- with(df, ifelse(inning_topbot == "Bot", away_team, home_team))
df$batting_team <- with(df, ifelse(inning_topbot == "Bot", home_team, away_team))
df <- df %>%
mutate(barrel = ifelse(launch_angle <= 50 & launch_speed >= 98 & launch_speed * 1.5 - launch_angle >= 117 & launch_speed + launch_angle >= 124, 1, 0))
df <- df %>%
mutate(spray_angle = round(
(atan(
(hc_x-125.42)/(198.27-hc_y)
)*180/pi*.75)
,1)
)
df <- df %>%
filter(!is.na(game_year))
return(df)
}
df <- df %>%
additional_info()
df$game_date <- as.character(df$game_date)
df <- df %>%
arrange(game_date)
df <- df %>%
filter(!is.na(game_date))
df <- df %>%
ungroup()
df <- df %>%
select(setdiff(names(.), c("error")))
cols_to_transform <- c("fielder_2", "pitcher_1", "fielder_2_1", "fielder_3",
"fielder_4", "fielder_5", "fielder_6", "fielder_7",
"fielder_8", "fielder_9")
df <- df %>%
mutate_at(.vars = cols_to_transform, as.numeric) %>%
mutate_at(.vars = cols_to_transform, function(x) {
ifelse(is.na(x), 999999999, x)
})
data_base_column_types <- read_csv("https://app.box.com/shared/static/q326nuker938n2nduy81au67s2pf9a3j.csv")
character_columns <- data_base_column_types %>%
filter(class == "character") %>%
pull(variable)
numeric_columns <- data_base_column_types %>%
filter(class == "numeric") %>%
pull(variable)
integer_columns <- data_base_column_types %>%
filter(class == "integer") %>%
pull(variable)
df <- df %>%
mutate_if(names(df) %in% character_columns, as.character) %>%
mutate_if(names(df) %in% numeric_columns, as.numeric) %>%
mutate_if(names(df) %in% integer_columns, as.integer)
return(df)
}
assign(paste(list[i], i, sep = "_"))
for( i in 1:3){
assign(paste(list[i], i, sep = "_"))
}
for( i in 1:3){
assign(paste(list[i], i, sep = "_"), i)
}
for( i in 1:3){
assign(paste("mlb", list[i], sep = "_"), i)
}
extract <-annual_statcast_query(2015)
mlb <- format_append_statcast(extract)
colnames(mlb)
View(mlb)
index = c(1:3,6:10,15:27,32:37,53:55,59,72,74,77:79,80:83,86:88,93:98)
mlb[,index]
mlb2 <- mlb[,index]
View(mlb2)
mlb3 <- mlb[which(!is.na(mlb2$events) )]
mlb3 <- mlb2 %>%
filter(!is.na(events))
View(mlb3)
seasons <- c("2015","2016","2017","2018","2019","20120","20121" )
assign(paste("mlb", 2015, sep = "_"), mlb3)
for (i in 1:length(seasons)){
print(i)
}
for (i in 1:length(seasons)){
print(seasons[i])
}
seasons <- c("2015","2016","2017","2018","2019","2020","2021" )
for (i in 1:length(seasons)){
print(seasons[i])
}
for (i in 1:length(seasons)){
extract <-annual_statcast_query(seasons[i])
mlb <- format_append_statcast(extract)
index = c(1:3,6:10,15:27,32:37,53:55,59,72,74,77:79,80:83,86:88,93:98)
mlb2 <- mlb[,index]
mlb3 <- mlb2 %>%
filter(!is.na(events))
assign(paste("mlb", seasons[i], sep = "_"), mlb3)
}
View(mlb_2017)
for (i in 1:length(seasons)){
extract <-annual_statcast_query(seasons[i])
mlb <- format_append_statcast(extract)
index = c(1:3,6:10,15:27,32:37,53:55,59,72,74,77:79,80:83,86:88,93:98)
mlb2 <- mlb[,index]
mlb3 <- mlb2 %>%
filter(!is.na(events))
assign(paste("mlb", seasons[i], sep = "_"), mlb3)
}
write.csv(mlb_2015, "C:/Users/James/OneDrive/School/HEAL/Baseball/mlb_2015.csv")
write.csv(mlb_2016, "C:/Users/James/OneDrive/School/HEAL/Baseball/mlb_2016.csv")
write.csv(mlb_2017, "C:/Users/James/OneDrive/School/HEAL/Baseball/mlb_2017.csv")
write.csv(mlb_2018, "C:/Users/James/OneDrive/School/HEAL/Baseball/mlb_2018.csv")
write.csv(mlb_2019, "C:/Users/James/OneDrive/School/HEAL/Baseball/mlb_2019.csv")
write.csv(mlb_2020, "C:/Users/James/OneDrive/School/HEAL/Baseball/mlb_2020.csv")
write.csv(mlb_2021, "C:/Users/James/OneDrive/School/HEAL/Baseball/mlb_2021.csv")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
summary(cars)
summary(cars)
library(stringr)
library(dplyr)
for (i in 41:length(months)){
temp <- tempfile()
##create url and download file
url <- paste(paste("https://s3.amazonaws.com/tripdata/", months[i], sep = ""), '-citibike-tripdata.zip', sep = "")
download.file(url, temp)
csv <-paste(months[i], '-citibike-tripdata.csv', sep = "")
#csv <-paste(substr(months[i], 1,4),"-", substr(months[i],5,6), " - Citi Bike trip data.csv", sep = "")
data <- read.csv(unz(temp, csv), encoding = "utf-8")
unlink(temp)
##assign unique name to dataset
assign(paste("bikeshare", months[i], sep = "_"), data)
##remove uneeded variables
##add rename for 2016+
data2 <- data %>%
select( Trip.Duration, Start.Time, Stop.Time, Start.Station.Latitude, Start.Station.Longitude) %>%
rename(tripduration = Trip.Duration, starttime = Start.Time, stoptime = Stop.Time, start.station.latitude = Start.Station.Latitude,
start.station.longitude = Start.Station.Songitude)
##write to csv
write.csv(data2, paste("C:/Users/James/OneDrive/School/ECON 4950/bikeshare_", months[i], ".csv", sep = "" ))
}
months <- c('201306', '201307', '201308', '201309', '201310', '201311', '201312',
'201401', '201402', '201403','201404', '201405', '201406','201407', '201408', '201409','201410', '201411', '201412',
'201501', '201502', '201503','201504', '201505', '201506','201507', '201508', '201509','201510', '201511', '201512',
'201601', '201602', '201603','201604', '201605', '201606','201607', '201608', '201609','201610', '201611', '201612',
'201701', '201702', '201703','201704', '201705', '201706','201707', '201708', '201709','201710', '201711', '201712')
for (i in 41:length(months)){
temp <- tempfile()
##create url and download file
url <- paste(paste("https://s3.amazonaws.com/tripdata/", months[i], sep = ""), '-citibike-tripdata.zip', sep = "")
download.file(url, temp)
csv <-paste(months[i], '-citibike-tripdata.csv', sep = "")
#csv <-paste(substr(months[i], 1,4),"-", substr(months[i],5,6), " - Citi Bike trip data.csv", sep = "")
data <- read.csv(unz(temp, csv), encoding = "utf-8")
unlink(temp)
##assign unique name to dataset
assign(paste("bikeshare", months[i], sep = "_"), data)
##remove uneeded variables
##add rename for 2016+
data2 <- data %>%
select( Trip.Duration, Start.Time, Stop.Time, Start.Station.Latitude, Start.Station.Longitude) %>%
rename(tripduration = Trip.Duration, starttime = Start.Time, stoptime = Stop.Time, start.station.latitude = Start.Station.Latitude,
start.station.longitude = Start.Station.Songitude)
##write to csv
write.csv(data2, paste("C:/Users/James/OneDrive/School/ECON 4950/bikeshare_", months[i], ".csv", sep = "" ))
}
for (i in 41:length(months)){
temp <- tempfile()
##create url and download file
url <- paste(paste("https://s3.amazonaws.com/tripdata/", months[i], sep = ""), '-citibike-tripdata.zip', sep = "")
download.file(url, temp)
csv <-paste(months[i], '-citibike-tripdata.csv', sep = "")
#csv <-paste(substr(months[i], 1,4),"-", substr(months[i],5,6), " - Citi Bike trip data.csv", sep = "")
data <- read.csv(unz(temp, csv), encoding = "utf-8")
unlink(temp)
##assign unique name to dataset
assign(paste("bikeshare", months[i], sep = "_"), data)
##remove uneeded variables
##add rename for 2016+
data2 <- data %>%
select( Trip.Duration, Start.Time, Stop.Time, Start.Station.Latitude, Start.Station.Longitude) %>%
rename(tripduration = Trip.Duration, starttime = Start.Time, stoptime = Stop.Time, start.station.latitude = Start.Station.Latitude,
start.station.longitude = Start.Station.Longitude)
##write to csv
write.csv(data2, paste("C:/Users/James/OneDrive/School/ECON 4950/bikeshare_", months[i], ".csv", sep = "" ))
}
for (i in 44:length(months)){
temp <- tempfile()
##create url and download file
url <- paste(paste("https://s3.amazonaws.com/tripdata/", months[i], sep = ""), '-citibike-tripdata.csv.zip', sep = "")
download.file(url, temp)
csv <-paste(months[i], '-citibike-tripdata.csv', sep = "")
#csv <-paste(substr(months[i], 1,4),"-", substr(months[i],5,6), " - Citi Bike trip data.csv", sep = "")
data <- read.csv(unz(temp, csv), encoding = "utf-8")
unlink(temp)
##assign unique name to dataset
assign(paste("bikeshare", months[i], sep = "_"), data)
##remove uneeded variables
##add rename for 2016+
data2 <- data %>%
select( Trip.Duration, Start.Time, Stop.Time, Start.Station.Latitude, Start.Station.Longitude) %>%
rename(tripduration = Trip.Duration, starttime = Start.Time, stoptime = Stop.Time, start.station.latitude = Start.Station.Latitude,
start.station.longitude = Start.Station.Longitude)
##write to csv
write.csv(data2, paste("C:/Users/James/OneDrive/School/ECON 4950/bikeshare_", months[i], ".csv", sep = "" ))
}
for (i in 47:length(months)){
temp <- tempfile()
##create url and download file
url <- paste(paste("https://s3.amazonaws.com/tripdata/", months[i], sep = ""), '-citibike-tripdata.csv.zip', sep = "")
download.file(url, temp)
csv <-paste(months[i], '-citibike-tripdata.csv', sep = "")
#csv <-paste(substr(months[i], 1,4),"-", substr(months[i],5,6), " - Citi Bike trip data.csv", sep = "")
data <- read.csv(unz(temp, csv), encoding = "utf-8")
unlink(temp)
##assign unique name to dataset
assign(paste("bikeshare", months[i], sep = "_"), data)
##remove uneeded variables
##add rename for 2016+
data2 <- data %>%
select( Trip.Duration, Start.Time, Stop.Time, Start.Station.Latitude, Start.Station.Longitude)
##write to csv
write.csv(data2, paste("C:/Users/James/OneDrive/School/ECON 4950/bikeshare_", months[i], ".csv", sep = "" ))
}
for (i in 47:length(months)){
temp <- tempfile()
##create url and download file
url <- paste(paste("https://s3.amazonaws.com/tripdata/", months[i], sep = ""), '-citibike-tripdata.csv.zip', sep = "")
download.file(url, temp)
csv <-paste(months[i], '-citibike-tripdata.csv', sep = "")
#csv <-paste(substr(months[i], 1,4),"-", substr(months[i],5,6), " - Citi Bike trip data.csv", sep = "")
data <- read.csv(unz(temp, csv), encoding = "utf-8")
unlink(temp)
##assign unique name to dataset
assign(paste("bikeshare", months[i], sep = "_"), data)
##remove uneeded variables
##add rename for 2016+
data2 <- data %>%
select(tripduration, starttime, stoptime, start.station.latitude, start.station.longitude)
##write to csv
write.csv(data2, paste("C:/Users/James/OneDrive/School/ECON 4950/bikeshare_", months[i], ".csv", sep = "" ))
}
paste("keegan", "brad", "James")
install.packages("devtools")
library(dslabs)
install.packages("dslabs")
library(dslabs)
head(murders)
data(murders)
head(murders)
filter(murdersRate, rate <= 0.71)
murdersRate <- mutate(murders, rate = total / population * 100000)
head(murdersRate)
head(murdersRate)
filter(murdersRate, rate <= 0.71)
murdersRate <- mutate(murders, rate = total / population * 100000)
murdersRateSelect <- select(murdersRate, state, rate)
filter(murdersRateSelect, rate <= 0.71)
filter(select(mutate(murders, rate = total / population * 100000),
state, rate), rate <= 0.71)
install.packages("styler")
install.packages("shiny")
library(shiny)
library(textreadr)
library(tidyverse)
library(readxl)
library(writexl)
library(lubridate)
library(R6)
library(testthat)
library(shiny)
setwd("C:/Users/James/OneDrive/School/MATH_3190/github")
devtools::install("hw2package")
library(hw2package)
cbb_shiny()
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans")
devtools::document()
devtools::install("hw2kmeans")
library(hw2kmeans)
