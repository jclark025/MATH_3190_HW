data2 <- data %>%
select( Trip.Duration, Start.Time, Stop.Time, Start.Station.Latitude, Start.Station.Longitude) %>%
rename(tripduration = Trip.Duration, starttime = Start.Time, stoptime = Stop.Time, start.station.latitude = Start.Station.Latitude,
start.station.longitude = Start.Station.Longitude)
##write to csv
write.csv(data2, paste("C:/Users/James/OneDrive/School/ECON 4950/bikeshare_", months[i], ".csv", sep = "" ))
}
for (i in 44:length(months)){
temp <- tempfile()
##create url and download file
url <- paste(paste("https://s3.amazonaws.com/tripdata/", months[i], sep = ""), '-citibike-tripdata.csv.zip', sep = "")
download.file(url, temp)
csv <-paste(months[i], '-citibike-tripdata.csv', sep = "")
#csv <-paste(substr(months[i], 1,4),"-", substr(months[i],5,6), " - Citi Bike trip data.csv", sep = "")
data <- read.csv(unz(temp, csv), encoding = "utf-8")
unlink(temp)
##assign unique name to dataset
assign(paste("bikeshare", months[i], sep = "_"), data)
##remove uneeded variables
##add rename for 2016+
data2 <- data %>%
select( Trip.Duration, Start.Time, Stop.Time, Start.Station.Latitude, Start.Station.Longitude) %>%
rename(tripduration = Trip.Duration, starttime = Start.Time, stoptime = Stop.Time, start.station.latitude = Start.Station.Latitude,
start.station.longitude = Start.Station.Longitude)
##write to csv
write.csv(data2, paste("C:/Users/James/OneDrive/School/ECON 4950/bikeshare_", months[i], ".csv", sep = "" ))
}
for (i in 47:length(months)){
temp <- tempfile()
##create url and download file
url <- paste(paste("https://s3.amazonaws.com/tripdata/", months[i], sep = ""), '-citibike-tripdata.csv.zip', sep = "")
download.file(url, temp)
csv <-paste(months[i], '-citibike-tripdata.csv', sep = "")
#csv <-paste(substr(months[i], 1,4),"-", substr(months[i],5,6), " - Citi Bike trip data.csv", sep = "")
data <- read.csv(unz(temp, csv), encoding = "utf-8")
unlink(temp)
##assign unique name to dataset
assign(paste("bikeshare", months[i], sep = "_"), data)
##remove uneeded variables
##add rename for 2016+
data2 <- data %>%
select( Trip.Duration, Start.Time, Stop.Time, Start.Station.Latitude, Start.Station.Longitude)
##write to csv
write.csv(data2, paste("C:/Users/James/OneDrive/School/ECON 4950/bikeshare_", months[i], ".csv", sep = "" ))
}
for (i in 47:length(months)){
temp <- tempfile()
##create url and download file
url <- paste(paste("https://s3.amazonaws.com/tripdata/", months[i], sep = ""), '-citibike-tripdata.csv.zip', sep = "")
download.file(url, temp)
csv <-paste(months[i], '-citibike-tripdata.csv', sep = "")
#csv <-paste(substr(months[i], 1,4),"-", substr(months[i],5,6), " - Citi Bike trip data.csv", sep = "")
data <- read.csv(unz(temp, csv), encoding = "utf-8")
unlink(temp)
##assign unique name to dataset
assign(paste("bikeshare", months[i], sep = "_"), data)
##remove uneeded variables
##add rename for 2016+
data2 <- data %>%
select(tripduration, starttime, stoptime, start.station.latitude, start.station.longitude)
##write to csv
write.csv(data2, paste("C:/Users/James/OneDrive/School/ECON 4950/bikeshare_", months[i], ".csv", sep = "" ))
}
paste("keegan", "brad", "James")
install.packages("devtools")
library(dslabs)
install.packages("dslabs")
library(dslabs)
head(murders)
data(murders)
head(murders)
filter(murdersRate, rate <= 0.71)
murdersRate <- mutate(murders, rate = total / population * 100000)
head(murdersRate)
head(murdersRate)
filter(murdersRate, rate <= 0.71)
murdersRate <- mutate(murders, rate = total / population * 100000)
murdersRateSelect <- select(murdersRate, state, rate)
filter(murdersRateSelect, rate <= 0.71)
filter(select(mutate(murders, rate = total / population * 100000),
state, rate), rate <= 0.71)
install.packages("styler")
install.packages("shiny")
library(shiny)
?pmf
library(ggplot)
library(ggplot2)
```{r,  out.width = "85%", fig.cap = "caption"}
nba <- read.csv("nba_v2.csv")
setwd("C:/Users/James/OneDrive/School/ECON 4950")
nba <- read.csv("nba_v2.csv")
setwd("C:/Users/James/OneDrive/School/MATH_3190/github")
devtools::install("hw2kmeans")
library(hw2kmeans)
data("iris")
data("iris")
force(iris)
?kmeans
kmeans(iris$Sepal.Length, iris$Sepal.Width, 3, 10)
library(tidyverse)
kmeans(iris$Sepal.Length, iris$Sepal.Width, 3, 10)
detach("package:hw2kmeans", unload = TRUE)
?kmeans
kmeans(cbind(iris$Sepal.Length, iris$Sepal.Width) 3)
kmeans(cbind(iris$Sepal.Length, iris$Sepal.Width), 3)
kmeans <- kmeans(cbind(iris$Sepal.Length, iris$Sepal.Width), 3)
View(kmeans)
kmeans$cluster
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst")
source("ui.R")
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst")
source("ui.R")
source("ui.R")
source("server.R")
ls()
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
library(shiny)
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
shinyApp(server = server, ui = ui)
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
View(kmeans)
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
data <- iris
data$cluster <- kmeans$cluster
##graph scatterplot
ggplot(data, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point()
selectedx <- reactive({
iris[,input$xcol]
})
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
k_viz <- function(data, xlab, ylab){
ggplot(data, aes(x = data[,1], y = data[,2], color = as.factor(data[,4]) ) ) + geom_point() +
scale_color_discrete(name = "Cluster") + labs(x = xlab,
y = ylab)
}
k_viz(data, "bleh", "jdja")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
k_viz <- function(data, xlab, ylab){
ggplot(data, aes(x = data[,1], y = data[,2], color = as.factor(data[,3]) ) ) + geom_point() +
scale_color_discrete(name = "Cluster") + labs(x = xlab,
y = ylab)
}
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
k_viz <- function(data, xlab, ylab){
ggplot(data, aes(x = data[,1], y = data[,2], shape = as.factor(data[,3]), color = data[,4] ) ) + geom_point() +
scale_color_discrete(name = "Cluster") + labs(x = xlab,
y = ylab)
}
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
k_viz <- function(data, xlab, ylab){
ggplot(data, aes(x = data[,1], y = data[,2], shape = as.factor(data[,3]), color = as.factor(data[,4]) ) ) + geom_point() +
scale_color_discrete(name = "Cluster") + labs(x = xlab,
y = ylab)
}
shinyApp(server = server, ui = ui)
k_viz <- function(data, xlab, ylab){
ggplot(data, aes(x = data[,1], y = data[,2], shape = as.factor(data[,3]), color = as.factor(data[,4]) ) ) + geom_point() +
scale_color_discrete(name = "Sepcies")+ scale_shape(name = "Cluster") + labs(x = xlab,
y = ylab)
}
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
shinyApp(server = server, ui = ui)
shiny_app("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst")
shinyApp(server = server, ui = ui)
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
shinyApp(server = server, ui = ui)
?knn
?Knn
?kNN
?knn
library(class)
?knn
shinyApp(server = server, ui = ui)
?predict
?kmeans
library(caret)
install.packages("caret")
set.seed(12345)
?createDataPartition
?createDataPartition
library(caret)
?createDataPartition
createDataPartition(iris, times = 1, p = 0.7, list = False)
?sample
train_obs <- sample(nrow(iris), nrow(iris)*0.7)
iris_train <- iris[train_obs,]
iris_test <- iris[-train_obs]
iris_test <- iris[-train_obs,]
kmeans <- kmeans(cbind(iris_train$Sepal.Length, iris_train$Sepal.Width), 3)
?predict
predict(kmeans,newdata = iris_train )
kmeans$tot.withinss
kmeans$totss
knn(iris_train[1:4,], iris_test[1:4,], k = 1)
?knn
knn(iris_train[1:4,], iris_test[1:4,], k = 1, cl = iris$Species)
knn(iris_train[1:4,], iris_test[1:4,], k = 1, cl = iris_train$Species)
knn(iris_train[,1:4], iris_test[,1:4], k = 1, cl = iris_train$Species)
knn(iris_train[,1:4], iris_test[,1:4], cl = iris_train$Species, k = 1)
knn_fit <- knn(iris_train[,1:4], iris_test[,1:4], cl = iris_train$Species, k = 1)
knn_fit <- knn(iris_train[,1:4], iris_test[,1:4], cl = iris_train$Species, k = 1)
?knn3
knn3(Species ~ ., data = iris_train , k = k)
knn3(Species ~ ., data = iris_train , k = 1)
knn_fit <- knn3(Species ~ ., data = iris_train , k = 1)
knn_fit$xlevels
knn_fit$terms
knn_fit$xlevels
knn_fit$learn[1]
test <- knn_fit$learn[1]
View(test)
test[1]
predict(knn_fit, newdata = iris_train)
predict(knn_fit, newdata = iris_train, type = "class")
preds <- predict(knn_fit, newdata = iris_train, type = "class")
##This will require the basketball_2022 df that was created above
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2package/inst")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
k_viz <- function(data, xlab, ylab, i){
graph_labs <- c("Cluster", "Predicted")
ggplot(data, aes(x = data[,1], y = data[,2], shape = as.factor(data[,3]), color = as.factor(data[,4]) ) ) + geom_point() +
scale_color_discrete(name = "Sepcies")+ scale_shape(name = graph_labs[i]) + labs(x = xlab,
y = ylab)
}
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
knn_fit <- knn3(Species ~ ., data = iris_train , k = 1)
preds <- predict(knn_fit, newdata = iris_train, type = "class")
preds
as.factor(preds)
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
shinyApp(server = server, ui = ui)
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
k_viz <- function(data, xlab, ylab, i){
graph_labs <- c("Cluster", "Predicted")
ggplot(data, aes(x = data[,1], y = data[,2], shape = as.factor(data[,3]), color = as.factor(data[,4]) ) ) + geom_point() + labs(x = xlab,
y = ylab, color = "Species", shape = graph_labs[1])
}
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
k_viz <- function(data, xlab, ylab, i){
graph_labs <- c("Cluster", "Predicted")
ggplot(data, aes(x = data[,1], y = data[,2], shape = as.factor(data[,3]), color = as.factor(data[,4]) ) ) + geom_point() + labs(x = xlab,
y = ylab, color = "Species", shape = graph_labs[i])
}
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
k_viz <- function(data, xlab, ylab, i){
graph_labs <- c("Cluster", "Predicted")
ggplot(data, aes(x = data[,1], y = data[,2], shape = as.factor(data[,3]), color = as.factor(data[,4]) ) ) +
geom_point() + labs(x = xlab, y = ylab, color = "Species", shape = graph_labs[i])
}
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
test_data <- cbind(iris$Sepal.Length, iris$Sepal.Width, preds, iris$Species)
knn_fit <- knn3(Species ~ ., data = iris , k = 1)
preds <- predict(knn_fit, newdata = iris, type = "class")
test_data <- cbind(iris$Sepal.Length, iris$Sepal.Width, preds, iris$Species)
test_data <- as.data.frame(cbind(iris$Sepal.Length, iris$Sepal.Width, preds, iris$Species))
test_data <- as.data.frame(iris$Sepal.Length, iris$Sepal.Width, preds, iris$Species)
test_data <- as.data.frame(cbind(iris$Sepal.Length, iris$Sepal.Width, preds, iris$Species))
k_viz(test_data, "lab", "lab", 2)
ggplot(test_data, aes(x = V1, y = V2, color = V4)) + geom_point()
ggplot(test_data, aes(x = V1, y = V2, color = as.factor(V4) )) + geom_point()
test_data$V4 <- as.factor(test_data$V4)
ggplot(test_data, aes(x = V1, y = V2, color = V4 )) + geom_point()
iris$Species
test_data <- as.data.frame(cbind(iris$Sepal.Length, iris$Sepal.Width, preds, as.factor(iris$Species) ))
ggplot(test_data, aes(x = V1, y = V2, color = V4 )) + geom_point()
ggplot(test_data, aes(x = V1, y = V2, color = as.factor(V4) )) + geom_point()
test_data$V4 <- as.factor(test_data$V4)
test_data <- as.data.frame(cbind(iris$Sepal.Length, iris$Sepal.Width, preds, as.data.frame(iris$Species) ))
ggplot(test_data, aes(x = V1, y = V2, color = as.factor(V4) )) + geom_point()
k_viz(test_data, "lab", "lab", 2)
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
knn_accuracy <- []
knn_accuracy <- []
knn_accuracy <- NA
knn3(Species ~ ., data = iris_train , k = 1)
knn_fit <- knn3(Species ~ ., data = iris_train , k = 1)
predict(knn_fit, newdata = knn_test)
predict(knn_fit, newdata = iris_test)
predict(knn_fit, newdata = iris_test, type = "class")
preds <- predict(knn_fit, newdata = iris_test, type = "class")
?confusionMatrix()
preds <- predict(knn_fit, newdata = iris_test, type = "class")
confusionMatrix(iris$Species, preds)
confusionMatrix(iris_test$Species, preds)
confusionMatrix(iris_test$Species, preds)["Accuracy"]
confusionMatrix(iris_test$Species, preds)$overall["Accuracy"]
for (i in 1:9){
knn_fit <- knn3(Species ~ ., data = iris_train , k = 1)
preds <- predict(knn_fit, newdata = iris_test, type = "class")
acc <- confusionMatrix(iris_test$Species, preds)$overall["Accuracy"]
knn_accuracy[i] <- acc
}
which.max(knn_accuracy)
for (i in 1:9){
knn_fit <- knn3(Species ~ ., data = iris_train , k = i)
preds <- predict(knn_fit, newdata = iris_test, type = "class")
acc <- confusionMatrix(iris_test$Species, preds)$overall["Accuracy"]
knn_accuracy[i] <- acc
}
which.max(knn_accuracy)
library(stats)
x <- as.matrix(iris[,1:4])
x <- as.matrix(iris_train[,1:4])
x <- as.matrix(iris[,1:4])
prcomp(x)
pca <- prcomp(x)
pca$x
data <- pca$x
data3 <- pca$x
data3 <- as.data.frame(pca$x)
ggplot(data3, aes(x = PC1, y = PC2)) + geom_point()
data3 <- cbind(as.data.frame(pca$x), iris$Species)
ggplot(data3, aes(x = PC1, y = PC2, color = Species)) + geom_point()
ggplot(data3, aes(x = PC1, y = PC2, color = iris$Species)) + geom_point()
data3 <- cbind(as.data.frame(pca$x[,1:2]), iris$Species)
k_viz2 <- function(data, xlab, ylab, i){
ggplot(data, aes(x = data[,1], y = data[,2], color = as.factor(data[,3]) ) ) +
geom_point() + labs(x = xlab, y = ylab, color = "Species")
}
k_viz2 <- function(data, xlab, ylab){
ggplot(data, aes(x = data[,1], y = data[,2], color = as.factor(data[,3]) ) ) +
geom_point() + labs(x = xlab, y = ylab, color = "Species")
}
k_viz2(data3, "lba", "lab")
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
pca$x
pca$x[1]
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
?numericInput
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
pca$x[1]
pca$x[,1]
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
library(umap)
install.packages("umap")
umap(x)
library(umap)
umap(x)
umap <- umap(x)
umap
umap_fit  <- umap(x)
umap_fit
umap_fit$layout
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
setwd("C:/Users/James/OneDrive/School/MATH_3190/github/hw2kmeans/inst/shiny")
source("ui.R")
source("server.R")
shinyApp(server = server, ui = ui)
